{
  "swagger": "2.0",
  "info": {
    "title": "Avatar Api v2",
    "version": "v2"
  },
  "host": "avatar.roblox.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v2/avatar/avatar": {
      "get": {
        "tags": [
          "AvatarV2"
        ],
        "summary": "Returns details about the authenticated user's avatar",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.AvatarModelV3"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AvatarV2:GetMyAvatarModel"
          ]
        }
      }
    },
    "/v2/avatar/avatar-fetch": {
      "get": {
        "tags": [
          "AvatarV2"
        ],
        "summary": "PlaceId may be null in some cases:\r\n-unsaved studio places\r\n-thumbnailer\r\nThis endpoint returns a bunch of data used by client to create the avatar in game.\r\nIt's a replacement for Avatar-fetch v1.1\r\nThe difference from AvatarFetch is that we take the avatar's scaling (not the universe's) and we return\r\na collection of asset type and asset ids instead of asset version ids\r\n\r\nBackpack gear is limited to (equippedGearCount + Platform.Avatar.Properties.Settings.Default.MaxGearInBackpack) items.\r\nhttps://confluence.roblox.com/display/PLATFORM/Avatar+Project+2016\r\n            \r\none strange thing - guests will come in with a false userId here - it will be the userId of the person they\r\nwant to look like, not the person they actually are.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "placeId",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.AvatarFetchModelV2"
            }
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "AvatarV2:AvatarFetchWithAssets"
          ]
        }
      }
    },
    "/v2/avatar/avatar-fetch-thumbnail": {
      "get": {
        "tags": [
          "AvatarV2"
        ],
        "summary": "When we ask thumbnail service to make a thumbnail, we send it a string such as /Asset/AvatarAccoutrement.ashx?...\r\nwhich also serves as the hash key for thumbnail existence.  But we want to move that endpoint here.\r\nSo, the RCC service on thumbnailer servers will convert that into a request to this endpoint.\r\n            \r\nThis endpoint returns data in the same format as avatar-fetch, but without a full backpack (to avoid loading those assets)\r\nwhich won't be necessary here.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "bodyColorsHash",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "assetIds",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "equippedGearId",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "resolvedAvatarType",
            "type": "integer",
            "format": "int32",
            "enum": [
              1,
              3
            ]
          },
          {
            "in": "query",
            "name": "height",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "width",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "head",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "depth",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "proportion",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "bodyType",
            "type": "number",
            "format": "double"
          },
          {
            "in": "query",
            "name": "bodyColorSetId",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.AvatarFetchThumbnailResponseV2"
            }
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "AvatarV2:AvatarFetchThumbnail"
          ]
        }
      }
    },
    "/v2/avatar/users/{userId}/avatar": {
      "get": {
        "tags": [
          "AvatarV2"
        ],
        "summary": "Returns details about a specified user's avatar",
        "description": "Includes assets, bodycolors, and playerAvatarType.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.AvatarModelV3"
            }
          },
          "400": {
            "description": "1: The specified user does not exist.\r\n2: An account for the given userId does not exist!"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AvatarV2:GetAvatarModel"
          ]
        }
      }
    },
    "/v2/avatar/set-body-colors": {
      "post": {
        "tags": [
          "AvatarV2"
        ],
        "summary": "Sets the authenticated user's body colors",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "bodyColorsModel",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Platform.Avatar.BodyColorsModelV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.AvatarApiSuccessResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AvatarV2:SetBodyColors"
          ]
        }
      }
    },
    "/v2/avatar/set-wearing-assets": {
      "post": {
        "tags": [
          "AvatarV2"
        ],
        "summary": "Sets the avatar's current assets to the list",
        "description": "Only allows items that you own, are not expired, and are wearable asset types.\r\nAny assets being worn before this method is called are automatically removed.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "wearRequestModel",
            "description": "Model of assets to be worn",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.WearRequestModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.WearResponseModel"
            }
          },
          "400": {
            "description": "3: Invalid assetId\r\n5: Meta does not apply to specified asset type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "500": {
            "description": "2: Failed to wear asset."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AvatarV2:SetWearingAssets"
          ]
        }
      }
    },
    "/v2/outfits/{userOutfitId}/update": {
      "post": {
        "tags": [
          "OutfitsV2"
        ],
        "summary": "Updates the contents of the outfit.",
        "description": "Fails if the user does not own any of the assetIds or if they are not wearable asset types.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "outfitUpdateModel",
            "description": "The updated outfit",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The specified userOutfit does not exist!\r\n3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you\r\n7: Invalid assetIds\r\n8: Invalid Player Avatar Type. Valid types are R6 and R15"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You don't have permission to update this outfit."
          },
          "500": {
            "description": "6: An error occurred while trying to update the outfit"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "OutfitsV2:UpdateOutfit"
          ]
        }
      }
    },
    "/v2/outfits/{userOutfitId}/wear": {
      "post": {
        "tags": [
          "OutfitsV2"
        ],
        "summary": "Wears the outfit for a user",
        "description": "- Gameserver-only endpoint\r\n- Applies the outfit's appearance to your avatar\r\n- If the user no longer owns one or more of the assets, invalidAssetIds will be populated with the unwearable assets.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.WearResponseModel"
            }
          },
          "400": {
            "description": "1: The specified userOutfitId is invalid!\r\n4: The specified userId is invalid!"
          },
          "401": {
            "description": "0: Authorization has been denied for this request.\r\n5: Unauthorized access"
          },
          "403": {
            "description": "2: You don't have permission to wear this outfit!"
          },
          "429": {
            "description": "3: The flood limit has been exceeded!"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "OutfitsV2:WearOutfit"
          ]
        }
      }
    },
    "/v2/outfits/create": {
      "post": {
        "tags": [
          "OutfitsV2"
        ],
        "summary": "Creates a new outfit.",
        "description": "Fails if any of the assetIds are not owned by the user, or not wearable types.\r\nThe name property of the request is optional as one will be auto-generated when the request has a null name.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "outfitUpdateModel",
            "description": "The new outfit",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you and was not added to the outfit\r\n7: Invalid Player Avatar Type. Valid types are R6 and R15\r\n8: Invalid assetIds\r\n9: Meta does not apply to specified asset type"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: You already have the maximum number of outfits"
          },
          "500": {
            "description": "6: An error occurred while creating the outfit"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "OutfitsV2:CreateOutfit"
          ]
        }
      }
    },
    "/v2/outfits/{userOutfitId}": {
      "patch": {
        "tags": [
          "OutfitsV2"
        ],
        "summary": "Updates the contents of an outfit.",
        "description": "Fails if the user does not own any of the assetIds or if they are not wearable asset types.\r\nAccepts partial updates.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userOutfitId",
            "description": "The user outfit id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Roblox-Place-Id",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "outfitUpdateModel",
            "description": "The updated outfit",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.OutfitUpdateModelV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Api.Avatar.Models.OutfitModel"
            }
          },
          "400": {
            "description": "1: The specified userOutfit does not exist!\r\n1: Must provide both assetIds and bodyColors in to update outfit contents.\r\n3: Body colors must be valid BrickColor IDs\r\n4: Invalid outfit name\r\n5: Asset is not wearable by you\r\n8: Invalid Player Avatar Type. Valid types are R6 and R15\r\n9: Invalid user outfit."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You don't have permission to update this outfit."
          },
          "500": {
            "description": "6: An error occurred while trying to update the outfit"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "OutfitsV2:UpdateOutfitPatch"
          ]
        }
      }
    }
  },
  "definitions": {
    "Roblox.Api.Avatar.Models.AssetIdAndTypeModel": {
      "description": "Asset ID model",
      "type": "object",
      "properties": {
        "assetId": {
          "format": "int64",
          "description": "Asset ID",
          "type": "integer"
        },
        "assetTypeId": {
          "format": "int64",
          "description": "asset Type ID",
          "type": "integer"
        },
        "meta": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetMetaModelV1"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AssetMetaModelV1": {
      "description": "Exhaustive model denoting all possible metadata fields of an asset",
      "type": "object",
      "properties": {
        "order": {
          "format": "int32",
          "description": "Layered-clothing order",
          "type": "integer"
        },
        "puffiness": {
          "format": "float",
          "description": "Layered-clothing puffiness",
          "type": "number"
        },
        "version": {
          "format": "int32",
          "description": "Client-authoritative meta model format version\r\n- default is always 1",
          "type": "integer"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AssetModelV2": {
      "description": "A model containing details about an asset\r\n- V2: adds CurrentVersionId, AssetMetaModel",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The id",
          "type": "integer"
        },
        "name": {
          "description": "The name",
          "type": "string"
        },
        "assetType": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetTypeModel"
        },
        "currentVersionId": {
          "format": "int64",
          "description": "Id of the current version of asset",
          "type": "integer"
        },
        "meta": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetMetaModelV1"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AssetTypeModel": {
      "description": "A model containing details about an asset type",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The id",
          "type": "integer"
        },
        "name": {
          "description": "The name",
          "type": "string"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AssetWearModel": {
      "description": "A model which contains\r\n- an asset id\r\n- AssetMetaModel",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "An asset id",
          "type": "integer"
        },
        "meta": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetMetaModelV1"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AvatarApiSuccessResponse": {
      "description": "Success response class",
      "type": "object",
      "properties": {
        "success": {
          "description": "Gets or sets a value indicating whether the request was a success.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AvatarFetchModelV2": {
      "type": "object",
      "properties": {
        "resolvedAvatarType": {
          "type": "string"
        },
        "equippedGearVersionIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "backpackGearVersionIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "assetAndAssetTypeIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetIdAndTypeModel"
          }
        },
        "animationAssetIds": {
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          }
        },
        "bodyColor3s": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.BodyColors3Model"
        },
        "scales": {
          "$ref": "#/definitions/Roblox.Web.Responses.Avatar.ScaleModel"
        },
        "emotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Avatar.Models.EmoteResponseModel"
          }
        }
      }
    },
    "Roblox.Api.Avatar.Models.AvatarFetchScales": {
      "description": "Model for fetching scale",
      "type": "object",
      "properties": {
        "Width": {
          "format": "double",
          "description": "The width of the avatar",
          "type": "number"
        },
        "Height": {
          "format": "double",
          "description": "The height of the avatar",
          "type": "number"
        },
        "Head": {
          "format": "double",
          "description": "The head size of the avatar",
          "type": "number"
        },
        "Depth": {
          "format": "double",
          "description": "The depth of the avatar",
          "type": "number"
        },
        "Proportion": {
          "format": "double",
          "description": "The body proportions of the avatar",
          "type": "number"
        },
        "BodyType": {
          "format": "double",
          "description": "The body type of the avatar",
          "type": "number"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AvatarFetchThumbnailResponseV2": {
      "description": "The response to fetch avatar thumbnails.",
      "type": "object",
      "properties": {
        "accessoryVersionIds": {
          "description": "Version ids of the accessories",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "equippedGearVersionIds": {
          "description": "Equipped gear version IDs",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "backpackGearVersionIds": {
          "description": "backpack gear version ids",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "resolvedAvatarType": {
          "description": "Avatar type",
          "type": "string"
        },
        "bodyColors": {
          "description": "Body colors",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scales": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.AvatarFetchScales"
        }
      }
    },
    "Roblox.Api.Avatar.Models.AvatarModelV3": {
      "description": "A model containing details about an avatar",
      "type": "object",
      "properties": {
        "scales": {
          "$ref": "#/definitions/Roblox.Web.Responses.Avatar.ScaleModel"
        },
        "playerAvatarType": {
          "format": "int32",
          "description": "The avatar type ['R6' = 1, 'R15' = 3]",
          "enum": [
            1,
            3
          ],
          "type": "integer"
        },
        "bodyColor3s": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.BodyColors3Model"
        },
        "assets": {
          "description": "The assets worn on the character",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetModelV2"
          }
        },
        "defaultShirtApplied": {
          "description": "Whether default clothing has been applied to this avatar.",
          "type": "boolean"
        },
        "defaultPantsApplied": {
          "description": "Whether default clothing has been applied to this avatar.",
          "type": "boolean"
        },
        "emotes": {
          "description": "The emotes on the character",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Avatar.Models.EmoteResponseModel"
          }
        }
      }
    },
    "Roblox.Api.Avatar.Models.BodyColors3Model": {
      "description": "A model containing RGB hex colors for each body part.",
      "type": "object",
      "properties": {
        "headColor3": {
          "description": "The RGB hex color for head color, e.g. #FFFFFF",
          "type": "string"
        },
        "torsoColor3": {
          "description": "The RGB hex color for torso color, e.g. #FFFFFF",
          "type": "string"
        },
        "rightArmColor3": {
          "description": "The RGB hex color for right arm color, e.g. #FFFFFF",
          "type": "string"
        },
        "leftArmColor3": {
          "description": "The RGB hex color for left arm color, e.g. #FFFFFF",
          "type": "string"
        },
        "rightLegColor3": {
          "description": "The RGB hex color for right leg color, e.g. #FFFFFF",
          "type": "string"
        },
        "leftLegColor3": {
          "description": "The RGB hex color for left leg color, e.g. #FFFFFF",
          "type": "string"
        }
      }
    },
    "Roblox.Api.Avatar.Models.BodyColorsModel": {
      "description": "A model container BrickColor ids for each body part.",
      "type": "object",
      "properties": {
        "headColorId": {
          "format": "int32",
          "description": "The BrickColor id for head color",
          "type": "integer"
        },
        "torsoColorId": {
          "format": "int32",
          "description": "The BrickColor id for torso color",
          "type": "integer"
        },
        "rightArmColorId": {
          "format": "int32",
          "description": "The BrickColor id for right arm color",
          "type": "integer"
        },
        "leftArmColorId": {
          "format": "int32",
          "description": "The BrickColor id for left arm color",
          "type": "integer"
        },
        "rightLegColorId": {
          "format": "int32",
          "description": "The BrickColor id for right leg color",
          "type": "integer"
        },
        "leftLegColorId": {
          "format": "int32",
          "description": "The BrickColor id for left leg color",
          "type": "integer"
        }
      }
    },
    "Roblox.Api.Avatar.Models.EmoteResponseModel": {
      "description": "Response object representing a user's emote",
      "type": "object",
      "properties": {
        "assetId": {
          "format": "int64",
          "description": "The asset id of the emote",
          "type": "integer"
        },
        "assetName": {
          "description": "The name of the emote",
          "type": "string"
        },
        "position": {
          "format": "int32",
          "description": "The position the emote is equipped to",
          "type": "integer"
        }
      }
    },
    "Roblox.Api.Avatar.Models.OutfitModel": {
      "description": "A slim model for user outfits",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The id",
          "type": "integer"
        },
        "name": {
          "description": "The name",
          "type": "string"
        },
        "isEditable": {
          "description": "Whether the outfit can be modified by the user",
          "type": "boolean"
        }
      }
    },
    "Roblox.Api.Avatar.Models.OutfitUpdateModelV2": {
      "description": "A model containing details needed to update or create an outfit",
      "type": "object",
      "properties": {
        "name": {
          "description": "The outfit name",
          "type": "string"
        },
        "bodyColors": {
          "$ref": "#/definitions/Roblox.Api.Avatar.Models.BodyColorsModel"
        },
        "assets": {
          "description": "Array of assets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetWearModel"
          }
        },
        "scale": {
          "$ref": "#/definitions/Roblox.Web.Responses.Avatar.ScaleModel"
        },
        "playerAvatarType": {
          "description": "The avatar scale",
          "type": "string"
        },
        "outfitType": {
          "format": "int32",
          "description": "The type of outfit ['Invalid' = 0, 'Avatar' = 1, 'DynamicHead' = 2]",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Api.Avatar.Models.WearRequestModel": {
      "description": "A model that contains a list of AssetWear models",
      "type": "object",
      "properties": {
        "assets": {
          "description": "The asset ids",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetWearModel"
          }
        }
      }
    },
    "Roblox.Api.Avatar.Models.WearResponseModel": {
      "description": "A model for wear outfit responses",
      "type": "object",
      "properties": {
        "invalidAssets": {
          "description": "The assets that could not be worn\r\nUnlike invalidAssetIds, only contains assets that are wearable types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Api.Avatar.Models.AssetModelV2"
          }
        },
        "invalidAssetIds": {
          "description": "The asset ids that could not be worn",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "success": {
          "description": "Whether or not all the outfit contents were successfully worn",
          "type": "boolean"
        }
      }
    },
    "Roblox.Platform.Avatar.BodyColorsModelV2": {
      "type": "object",
      "properties": {
        "headColor3": {
          "type": "string"
        },
        "torsoColor3": {
          "type": "string"
        },
        "rightArmColor3": {
          "type": "string"
        },
        "leftArmColor3": {
          "type": "string"
        },
        "rightLegColor3": {
          "type": "string"
        },
        "leftLegColor3": {
          "type": "string"
        }
      }
    },
    "Roblox.Web.Responses.Avatar.ScaleModel": {
      "type": "object",
      "properties": {
        "height": {
          "format": "double",
          "type": "number"
        },
        "width": {
          "format": "double",
          "type": "number"
        },
        "head": {
          "format": "double",
          "type": "number"
        },
        "depth": {
          "format": "double",
          "type": "number"
        },
        "proportion": {
          "format": "double",
          "type": "number"
        },
        "bodyType": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
      "type": "object"
    }
  }
}