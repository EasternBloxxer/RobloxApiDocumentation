{
  "swagger": "2.0",
  "info": {
    "title": "Authentication Api v1",
    "version": "v1"
  },
  "host": "auth.roblox.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/account/pin": {
      "delete": {
        "tags": [
          "AccountPin"
        ],
        "summary": "Request for deletes the account pin from the account.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestBody",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.AccountPinRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AccountPin:DeleteAccountPin"
          ]
        }
      },
      "get": {
        "tags": [
          "AccountPin"
        ],
        "summary": "Gets the account pin status. If the account pin is valid, this returns the time in seconds until when the account pin is unlocked.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.AccountPinStatusResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AccountPin:GetAccountPinStatus"
          ]
        }
      },
      "patch": {
        "tags": [
          "AccountPin"
        ],
        "summary": "Request made to update the account pin on the account.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestBody",
            "description": "The request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.AccountPinRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AccountPin:UpdateAccountPin"
          ]
        }
      },
      "post": {
        "tags": [
          "AccountPin"
        ],
        "summary": "Reuqest to create the account pin.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestBody",
            "description": "The Roblox.Authentication.Api.Models.AccountPinRequest.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.AccountPinRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AccountPin:NewAccountPin"
          ]
        }
      }
    },
    "/v1/auth/metadata": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Gets Auth meta data",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.AuthMetaDataResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Authentication:GetMetaData"
          ]
        }
      }
    },
    "/v1/credentials/verification": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "Checks if it is possible to send a verification message for the provided credentials.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "CredentialType",
            "description": "Credentials type Roblox.Platform.Authentication.CredentialsType.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ]
          },
          {
            "in": "query",
            "name": "CredentialValue",
            "description": "Credentials value.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Password",
            "description": "Credentials password.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.CanSendCredentialsVerificationMessageResponse"
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n1: Credential value and password are required. Please try again."
          },
          "404": {
            "description": "5: Credentials verification operation is unavailable. Please try again later."
          },
          "429": {
            "description": "2: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "5: Credentials verification operation is unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Credentials:CanSendCredentialsVerificationMessageFromUri"
          ]
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Checks if it is possible to send a verification message for the provided credentials.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request model with a credential value, type, and password.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SendCredentialsVerificationMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.CanSendCredentialsVerificationMessageResponse"
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n1: Credential value and password are required. Please try again."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "404": {
            "description": "5: Credentials verification operation is unavailable. Please try again later."
          },
          "429": {
            "description": "2: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "5: Credentials verification operation is unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Credentials:CanSendCredentialsVerificationMessageFromBody"
          ]
        }
      }
    },
    "/v1/metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Get the metadata",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.MetadataResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Metadata:GetMetadata"
          ]
        }
      }
    },
    "/v1/passwords/validate": {
      "get": {
        "tags": [
          "PasswordsV2"
        ],
        "summary": "Endpoint for checking if a password is valid.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "description": "The username.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Password",
            "description": "The password.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.PasswordValidationResponse"
            }
          },
          "400": {
            "description": "1: Valid Username and Password are required. Please try again."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "PasswordsV2:ValidateFromUri"
          ]
        }
      },
      "post": {
        "tags": [
          "PasswordsV2"
        ],
        "summary": "Endpoint for checking if a password is valid.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The Roblox.Authentication.Api.Models.PasswordValidationModel.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.PasswordValidationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.PasswordValidationResponse"
            }
          },
          "400": {
            "description": "1: Valid Username and Password are required. Please try again."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "PasswordsV2:ValidateFromBody"
          ]
        }
      }
    },
    "/v1/qq/metadata": {
      "get": {
        "tags": [
          "QQ"
        ],
        "summary": "Get metadata.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "getIdentifier",
            "description": "",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "appType",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentMetadataResponse"
            }
          },
          "503": {
            "description": "7: The Roblox API is currently unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "QQ:QQMetadata"
          ]
        }
      }
    },
    "/v1/recovery/metadata": {
      "get": {
        "tags": [
          "Recovery"
        ],
        "summary": "Get metadata for forgot endpoints",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RecoveryMetadataResponse"
            }
          },
          "503": {
            "description": "7: The Roblox WeChat API is currently unavailable."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Recovery:GetMetadata"
          ]
        }
      }
    },
    "/v1/revert/account": {
      "get": {
        "tags": [
          "Revert"
        ],
        "summary": "Get Revert Account ticket info",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ticket",
            "description": "Ticket Guid to revert account.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RevertAccountInfoResponse"
            }
          },
          "400": {
            "description": "2: The account revert ticket is not valid"
          },
          "503": {
            "description": "1: This feature is disabled"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Revert:RevertAccountInfo"
          ]
        }
      },
      "post": {
        "tags": [
          "Revert"
        ],
        "summary": "Submit Revert Account Request",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The Roblox.Authentication.Api.Models.RevertAccountSubmitRequest containing the necessary information to revert account.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RevertAccountSubmitRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LoginResponse"
            }
          },
          "400": {
            "description": "2: The account revert ticket is not valid\r\n3: Password is not valid\r\n4: Passwords do not match\r\n5: Password cannot be used\r\n8: The account security ticket is expired."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "0: Unknown\r\n1: This feature is disabled"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Revert:RevertAccountSubmit"
          ]
        }
      }
    },
    "/v1/social/connected-providers": {
      "get": {
        "tags": [
          "SocialAuthentication"
        ],
        "summary": "Get social network user information if the given social auth method is connected to current user.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SocialProvidersResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialAuthentication:Providers"
          ]
        }
      }
    },
    "/v1/twostepverification/metadata": {
      "get": {
        "tags": [
          "TwoStepVerification"
        ],
        "summary": "Get metadata for two step verification",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TwoStepVerificationMetadataResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "TwoStepVerification:GetMetadata"
          ]
        }
      }
    },
    "/v1/usernames": {
      "get": {
        "tags": [
          "Usernames"
        ],
        "summary": "Gets a list of existing usernames on Roblox based on the query parameters",
        "description": "This endpoint can be expanded in the future to include other query parameters such as \"startsWith\"",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "description": "The username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.UsernamesResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Usernames:Get"
          ]
        }
      }
    },
    "/v1/usernames/validate": {
      "get": {
        "tags": [
          "Usernames"
        ],
        "summary": "Checks if a username is valid.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "description": "The username",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Birthday",
            "description": "The birthday",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "Context",
            "description": "Roblox.Authentication.Api.Models.UsernameValidationContext",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.UsernameValidationResponse"
            }
          },
          "400": {
            "description": "1: A valid username is required.\r\n2: A valid birthday or authenticated user is required."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Usernames:ValidateFromUri"
          ]
        }
      },
      "post": {
        "tags": [
          "Usernames"
        ],
        "summary": "Checks if a username is valid.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The Roblox.Authentication.Api.Models.UsernameValidationRequest.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.UsernameValidationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.UsernameValidationResponse"
            }
          },
          "400": {
            "description": "1: A valid username is required.\r\n2: A valid birthday or authenticated user is required."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Usernames:ValidateFromBody"
          ]
        }
      }
    },
    "/v1/validators/email": {
      "get": {
        "tags": [
          "Validators"
        ],
        "summary": "Tries to check if an email is valid",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Email",
            "description": "Gets or sets the email to check for validation",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.EmailValidationResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Validators:IsEmailValid"
          ]
        }
      }
    },
    "/v1/validators/username": {
      "get": {
        "tags": [
          "Validators"
        ],
        "summary": "Tries to get a valid username if the current username is taken",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "Username",
            "description": "Gets or sets the username to use as the base username provided by the user",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "BirthDay",
            "description": "Gets or sets the birth day.",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RecommendedUsernameResponse"
            }
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Validators:GetRecommendedUsername"
          ]
        }
      }
    },
    "/v1/wechat/metadata": {
      "get": {
        "tags": [
          "WeChat"
        ],
        "summary": "Get metadata.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "getIdentifier",
            "description": "",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "appType",
            "description": "",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentMetadataResponse"
            }
          },
          "503": {
            "description": "7: The Roblox API is currently unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:WeChatMetadata"
          ]
        }
      }
    },
    "/v1/wechat/tencent-id": {
      "get": {
        "tags": [
          "WeChat"
        ],
        "summary": "Get WeChat Tencent Identifier",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "503": {
            "description": "7: The Roblox API is currently unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:WeChatIdentifier"
          ]
        }
      }
    },
    "/v1/xbox/connection": {
      "get": {
        "tags": [
          "Xbox"
        ],
        "summary": "Check if the current user has an Xbox connected.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxConnectionModel"
            }
          },
          "403": {
            "description": ""
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Xbox:GetConnection"
          ]
        }
      }
    },
    "/v1/xbox/get-login-consecutive-days": {
      "get": {
        "tags": [
          "Xbox"
        ],
        "summary": "Get the consecutive days the xbox user has been logged in.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxLoginConsecutiveDaysResponse"
            }
          },
          "403": {
            "description": ""
          },
          "400": {
            "description": "36: Invalid Xbox Live Account"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Xbox:GetXboxUserLoginConsecutiveDays"
          ]
        }
      }
    },
    "/v1/xbox-live/account": {
      "get": {
        "tags": [
          "XboxLive"
        ],
        "summary": "Return Roblox Account associated to logged xbox user.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxLiveAccountResponse"
            }
          },
          "400": {
            "description": "24: Invalid Token"
          },
          "401": {
            "description": "26: Invalid Credentials"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "XboxLive:GetAccountInfo"
          ]
        }
      }
    },
    "/external/login": {
      "post": {
        "tags": [
          "ExternalIdentitiesGateway"
        ],
        "summary": "Logs in a user to Roblox based on the user's authenticated external provider session",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "ExternalIdentitiesGateway:ExternalLogin"
          ]
        }
      }
    },
    "/external/loginAndLink": {
      "post": {
        "tags": [
          "ExternalIdentitiesGateway"
        ],
        "summary": "Logins in a user to Roblox, then links the Roblox account to the external provider ID",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "ExternalIdentitiesGateway:LoginAndLink"
          ]
        }
      }
    },
    "/external/signup": {
      "post": {
        "tags": [
          "ExternalIdentitiesGateway"
        ],
        "summary": "Signs a user up for Roblox and links the account to the authenticated external provider ID",
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "ExternalIdentitiesGateway:Signup"
          ]
        }
      }
    },
    "/external/unlink": {
      "post": {
        "tags": [
          "ExternalIdentitiesGateway"
        ],
        "summary": "Unlink the logged in Roblox account from the current external provider ID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.Request.ExternalUnlinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "ExternalIdentitiesGateway:Unlink"
          ]
        }
      }
    },
    "/v1/account/pin/lock": {
      "post": {
        "tags": [
          "AccountPin"
        ],
        "summary": "Request to locks the account which has an account pin enabled.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AccountPin:LockAccountPin"
          ]
        }
      }
    },
    "/v1/account/pin/unlock": {
      "post": {
        "tags": [
          "AccountPin"
        ],
        "summary": "Requests to unlock the account pin.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "requestBody",
            "description": "The Roblox.Authentication.Api.Models.AccountPinRequest containing the entered pin.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.AccountPinRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.AccountPinResponse"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "AccountPin:UnlockAccountPin"
          ]
        }
      }
    },
    "/v1/authentication-ticket": {
      "post": {
        "tags": [
          "AuthenticationTicket"
        ],
        "summary": "Creates a one time use authentication ticket for authenticated users.",
        "description": "Authentication tickets can be redeemed to create a new authentication session of the current user in a different browser or app.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Missing custom Roblox header."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: The UrlReferrer was invalid or came from outside Roblox."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "AuthenticationTicket:CreateAuthenticationTicket"
          ]
        }
      }
    },
    "/v1/authentication-ticket/redeem": {
      "post": {
        "tags": [
          "AuthenticationTicket"
        ],
        "summary": "Redeems an authentication ticket.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "RBXAuthenticationNegotiation",
            "description": "The custom header required to redeem a ticket",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "The request model containing the authentication ticket.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RedeemAuthenticationTicketRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Missing custom Roblox header."
          },
          "403": {
            "description": "3: Authentication ticket was not sent.\r\n4: Authentication ticket was invalid."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "AuthenticationTicket:RedeemAuthenticationTicket"
          ]
        }
      }
    },
    "/v1/credentials/verification/send": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Sends a verification message to the provided credentials.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request model with a credential value, type, and password.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SendCredentialsVerificationMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n1: Credential value and password are required. Please try again.\r\n3: Verification with received credential type is not supported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: Could not send a verification message. Please try again later."
          },
          "404": {
            "description": "5: Credentials verification operation is unavailable. Please try again later."
          },
          "429": {
            "description": "2: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "5: Credentials verification operation is unavailable. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Credentials:SendCredentialsVerificationMessage"
          ]
        }
      }
    },
    "/v1/identity-verification/login": {
      "post": {
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Endpoint for login with identity verification",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.Request.IdentityVerificationLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Invalid login ticket.\r\n2: Invalid result token.\r\n3: Invalid user.\r\n4: Authentication failure."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "IdentityVerification:Login"
          ]
        }
      }
    },
    "/v1/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticates a user.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.LoginRequest.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LoginResponse"
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n3: Username and Password are required. Please try again.\r\n8: Login with received credential type is not supported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n2: You must pass the robot test before logging in.\r\n4: Account has been locked. Please request a password reset.\r\n5: Unable to login. Please use Social Network sign on.\r\n6: Account issue. Please contact Support.\r\n9: Unable to login with provided credentials. Default login is required.\r\n10: Received credentials are unverified.\r\n12: Existing login session found. Please log out first.\r\n14: The account is unable to log in. Please log in to the LuoBu app.\r\n15: Too many attempts. Please wait a bit."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "11: Service unavailable. Please try again."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Authentication:Login"
          ]
        }
      }
    },
    "/v1/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Destroys the current authentication session.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Authentication:LogOut"
          ]
        }
      }
    },
    "/v1/logoutfromallsessionsandreauthenticate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logs out user from all other sessions.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Authentication:LogoutFromAllSessionsAndReauthenticate"
          ]
        }
      }
    },
    "/v1/palisades-live/connect": {
      "post": {
        "tags": [
          "PSLive"
        ],
        "summary": "Link the authenticated Playstation user to an existing Roblox Account.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.PlaystationConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LoginResponse"
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "PSLive:Connect"
          ]
        }
      }
    },
    "/v1/palisades-live/disconnect": {
      "post": {
        "tags": [
          "PSLive"
        ],
        "summary": "Unlink the authenticated Roblox account from the Playstation account.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "PSLive:Disconnect"
          ]
        }
      }
    },
    "/v1/palisades-live/login": {
      "post": {
        "tags": [
          "PSLive"
        ],
        "summary": "Log in a user based on his authenticated PlayStation session",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "PSLive:Login"
          ]
        }
      }
    },
    "/v1/palisades-live/signup": {
      "post": {
        "tags": [
          "PSLive"
        ],
        "summary": "Sing up a user for Roblox on his authenticated PlayStation session",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.PlaystationSignupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "PSLive:Signup"
          ]
        }
      }
    },
    "/v1/qq/callback": {
      "post": {
        "tags": [
          "QQ"
        ],
        "summary": "Token Exchange endpoint to exchange 'code' parameter for QQ voucher (containing QQ user info) and user id if one exists",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.TencentTokenExchangeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentTokenExchangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentAuthResponse"
            }
          },
          "400": {
            "description": "2: The request is empty.\r\n5: The authorization code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n15: The state is expired.\r\n16: The state is invalid.\r\n27: The user is not found."
          },
          "429": {
            "description": "3: Too many requests. Please try again later."
          },
          "503": {
            "description": "7: The Roblox API is currently unavailable.\r\n25: The QQ API is unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "QQ:QQCallback"
          ]
        }
      }
    },
    "/v1/qq/connect": {
      "post": {
        "tags": [
          "QQ"
        ],
        "summary": "Endpoint for connecting a QQ account to an existing Roblox user",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.TencentConnectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LoginResponse"
            }
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n101: The Voucher is expired.\r\n102: The Voucher is invalid.\r\n103: The Account is already connected to a Roblox Account."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "100: Service unavailable. Please try again."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "QQ:QQConnect"
          ]
        }
      }
    },
    "/v1/qq/signupwithoutpassword": {
      "post": {
        "tags": [
          "QQ"
        ],
        "summary": "Endpoint for signing up a new QQ user with Display Name and no Password",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.TencentSignupWithoutPasswordRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentSignupWithoutPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SignupResponse"
            }
          },
          "400": {
            "description": "2: The request is empty.\r\n11: The birthday is invalid.\r\n12: The password is invalid.\r\n13: The username is invalid.\r\n26: Display Name is invalid.\r\n28: The Tencent developer app type is invalid.\r\n154: UserAgreementIdsNull\r\n155: InvalidModelState"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The Voucher is expired.\r\n9: The Voucher is invalid.\r\n14: The Account is already connected to a Roblox Account.\r\n29: Account is unable to be registered\r\n156: Authentication request is not proxied"
          },
          "429": {
            "description": "3: Too many requests. Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n153: InsertAcceptancesFailed"
          },
          "503": {
            "description": "7: The Roblox API is currently unavailable.\r\n10: Failed to create user.\r\n25: The QQ API is unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "QQ:QQSignupWithoutPassword"
          ]
        }
      }
    },
    "/v1/qq/token-authentication": {
      "post": {
        "tags": [
          "QQ"
        ],
        "summary": "Token Authentication Endpoint for Mobile",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.TencentTokenAuthenticationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.QQTokenAuthenticationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentAuthResponse"
            }
          },
          "400": {
            "description": "2: The request is empty.\r\n5: The authorization code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n15: The state is expired.\r\n16: The state is invalid.\r\n19: The token is invalid.\r\n156: Authentication request is not proxied"
          },
          "429": {
            "description": "3: Too many requests. Please try again later."
          },
          "503": {
            "description": "7: The Roblox API is currently unavailable.\r\n25: The QQ API is unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "QQ:QQTokenAuthentication"
          ]
        }
      }
    },
    "/v1/qq/verify-connect": {
      "post": {
        "tags": [
          "QQ"
        ],
        "summary": "Endpoint for verifying a QQ account connection to an existing Roblox user",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentVerifyConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: User is invalid.\r\n5: Invalid two step verification ticket.\r\n6: The code is invalid.\r\n7: The action is unsupported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The Voucher is expired.\r\n9: The Voucher is invalid."
          },
          "429": {
            "description": "3: Too many attempts. Please try again later."
          },
          "503": {
            "description": "2: The two step verification feature is not enabled at this time."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "QQ:QQVerifyConnect"
          ]
        }
      }
    },
    "/v1/signup": {
      "post": {
        "tags": [
          "Signup"
        ],
        "summary": "Endpoint for signing up a new user",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.SignupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SignupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SignupResponse"
            }
          },
          "400": {
            "description": "Bad request\r\n16: User agreement ids are null."
          },
          "500": {
            "description": "Internal server error\r\n15: Insert acceptances failed."
          },
          "503": {
            "description": "Service unavailable"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: Captcha Failed.\r\n4: Invalid Birthday.\r\n5: Invalid Username.\r\n6: Username already taken.\r\n7: Invalid Password.\r\n8: Password and Username are same.\r\n9: Password is too simple.\r\n10: Email is invalid.\r\n11: Asset is invalid.\r\n12: Too many attempts. Please wait a bit.\r\n17: One time Passcode session was not valid"
          },
          "429": {
            "description": "3: Too many attempts. Please wait a bit."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Signup:Signup"
          ]
        }
      }
    },
    "/v1/social/{provider}/disconnect": {
      "post": {
        "tags": [
          "SocialAuthentication"
        ],
        "summary": "Removes the given social authentication method from current Roblox user if it is connected.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "description": "The social authentication provider, e.g. Facebook",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "The request body for additional parameters that may be required for disconnect",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SocialAuthenticationDisconnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "Bad request\r\n2: Unsupported social provider type."
          },
          "403": {
            "description": "Forbidden\r\n0: Token Validation Failed\r\n3: Cannot disconnect the only authentication method. Password on account is required.\r\n4: The password provided is invalid."
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialAuthentication:Disconnect"
          ]
        }
      }
    },
    "/v1/twostepverification/resend": {
      "post": {
        "tags": [
          "TwoStepVerification"
        ],
        "summary": "Resends a two step verification code.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TwoStepVerificationTicketRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TwoStepVerificationSentResponse"
            }
          },
          "400": {
            "description": "1: User is invalid.\r\n5: Invalid two step verification ticket.\r\n7: The action is unsupported."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "3: Too many attempts. Please try again later."
          },
          "500": {
            "description": "4: Account issue. Please contact Support."
          },
          "503": {
            "description": "2: The two step verification feature is not enabled at this time."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "TwoStepVerification:Resend"
          ]
        }
      }
    },
    "/v1/twostepverification/verify": {
      "post": {
        "tags": [
          "TwoStepVerification"
        ],
        "summary": "Verifies a two step verification code.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The request model containing information needed to verify with two step verification.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TwoStepVerificationVerifyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: User is invalid.\r\n5: Invalid two step verification ticket.\r\n6: The code is invalid.\r\n7: The action is unsupported."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "3: Too many attempts. Please try again later."
          },
          "503": {
            "description": "2: The two step verification feature is not enabled at this time."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "TwoStepVerification:Verify"
          ]
        }
      }
    },
    "/v1/user/passwords/change": {
      "post": {
        "tags": [
          "Passwords"
        ],
        "summary": "Changes the password for the authenticated user.",
        "description": "The current password is needed for verification that the password can be changed.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The request model including the current password, and the new password.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.PasswordChangeModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.InvalidCurrentPassword\r\n            OR\r\n            Roblox.Web.Authentication.Passwords.PasswordResponseCodes.InvalidPassword"
          },
          "403": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.PinLocked\r\n0: Token Validation Failed"
          },
          "429": {
            "description": "Roblox.Web.Authentication.Passwords.PasswordResponseCodes.Flooded"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Passwords:ChangePassword"
          ]
        }
      }
    },
    "/v1/username": {
      "post": {
        "tags": [
          "UsernameChange"
        ],
        "summary": "Change the user's username",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The Roblox.Authentication.Api.Models.UsernameChangeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.UsernameChangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "5: You don't have enough Robux to change your username.\r\n10: This username is already in use\r\n11: Username not appropriate for Roblox\r\n12: Usernames can be 3 to 20 characters long\r\n13: Usernames can’t start or end with _ and can have at most one _\r\n14: Only a-z, A-Z, 0-9, and _ are allowed\r\n15: Username is null\r\n16: Username might contain private information\r\n17: This username is not available\r\n18: Username is same as current"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: PIN is locked.\r\n2: A verified email is missing\r\n3: Your password is incorrect.\r\n100: Unknown birthday"
          },
          "500": {
            "description": "0: An unknown error occured.\r\n5: You don't have enough Robux to change your username."
          },
          "503": {
            "description": "4: The feature is currently not available. Please try again later."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "UsernameChange:ChangeUsername"
          ]
        }
      }
    },
    "/v1/usernames/recover": {
      "post": {
        "tags": [
          "Usernames"
        ],
        "summary": "Sends an email of all accounts belonging to an email",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RecoverUsernameRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RecoverUsernameResponse"
            }
          },
          "400": {
            "description": "20: Invalid Email\r\n21: Invalid Phone\r\n23: No Account Found"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: Too many attempts. Please wait a bit."
          },
          "500": {
            "description": "0: An unexpected error occurred."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Usernames:RecoverUsername"
          ]
        }
      }
    },
    "/v1/users/{userId}/impersonate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Impersonates a user.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The ID of the user to be impersonated.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The user you supplied does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to impersonate this user."
          },
          "429": {
            "description": "3: You've made too many attempts. Please try again later."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "Authentication:Impersonate"
          ]
        }
      }
    },
    "/v1/wechat/callback": {
      "post": {
        "tags": [
          "WeChat"
        ],
        "summary": "Token Exchange endpoint to exchange 'code' parameter for WeChat voucher (containing WeChat user info) and user id if one exists",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.WeChatTokenExchangeRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentTokenExchangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentAuthResponse"
            }
          },
          "400": {
            "description": "2: The request is empty.\r\n5: The authorization code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n15: The state is expired.\r\n16: The state is invalid."
          },
          "429": {
            "description": "3: Too many requests. Please try again later."
          },
          "503": {
            "description": "1: The Wechat API is unavailable.\r\n7: The Roblox API is currently unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:WeChatCallback"
          ]
        }
      }
    },
    "/v1/wechat/connect": {
      "post": {
        "tags": [
          "WeChat"
        ],
        "summary": "Endpoint for connecting a wechat account to an existing Roblox user",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Roblox.Authentication.Api.Models.TencentConnectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LoginResponse"
            }
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n101: The Voucher is expired.\r\n102: The Voucher is invalid.\r\n103: The Account is already connected to a Roblox Account."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit."
          },
          "503": {
            "description": "100: Service unavailable. Please try again."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:WeChatConnect"
          ]
        }
      }
    },
    "/v1/wechat/migrate-luobu-rnv-mapping": {
      "post": {
        "tags": [
          "WeChat"
        ],
        "summary": "Endpoint for one time Luobu RNV account mapping migration",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LuobuRNVMappingMigrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LuobuRNVMappingMigrationResponse"
            }
          },
          "400": {
            "description": "13: The username is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n152: Roblox Account Create Api Key is invalid"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "1: The Wechat API is unavailable.\r\n7: The Roblox API is currently unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:MigrateLuobuRNVMapping"
          ]
        }
      }
    },
    "/v1/wechat/roblox-account-create": {
      "post": {
        "tags": [
          "WeChat"
        ],
        "summary": "Endpoint for creating a roblox account by openId",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RobloxAccountCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.RobloxAccountCreationResponse"
            }
          },
          "400": {
            "description": "11: The birthday is invalid.\r\n13: The username is invalid.\r\n26: Display Name is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n152: Roblox Account Create Api Key is invalid"
          },
          "500": {
            "description": "0: An unknown error occurred."
          },
          "503": {
            "description": "1: The Wechat API is unavailable.\r\n7: The Roblox API is currently unavailable.\r\n10: Failed to create user."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:RobloxAccountCreate"
          ]
        }
      }
    },
    "/v1/wechat/signupwithoutpassword": {
      "post": {
        "tags": [
          "WeChat"
        ],
        "summary": "Endpoint for signing up a new wechat user with a Display Name and no Password",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "!:TencentSignUpWithOutPasswordRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentSignupWithoutPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.SignupResponse"
            }
          },
          "400": {
            "description": "2: The request is empty.\r\n11: The birthday is invalid.\r\n13: The username is invalid.\r\n26: Display Name is invalid.\r\n28: The Tencent developer app type is invalid.\r\n154: UserAgreementIdsNull\r\n155: InvalidModelState"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The Voucher is expired.\r\n9: The Voucher is invalid.\r\n14: The Account is already connected to a Roblox Account.\r\n29: Account is unable to be registered\r\n156: Authentication request is not proxied"
          },
          "429": {
            "description": "3: Too many requests. Please try again later."
          },
          "500": {
            "description": "0: An unknown error occurred.\r\n153: InsertAcceptancesFailed"
          },
          "503": {
            "description": "1: The Wechat API is unavailable.\r\n7: The Roblox API is currently unavailable.\r\n10: Failed to create user."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:WechatSignupWithoutPassword"
          ]
        }
      }
    },
    "/v1/wechat/token-authentication": {
      "post": {
        "tags": [
          "WeChat"
        ],
        "summary": "Token Authentication Endpoint for Mobile",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentTokenAuthenticationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentAuthResponse"
            }
          },
          "400": {
            "description": "2: The request is empty.\r\n5: The authorization code is invalid."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n15: The state is expired.\r\n16: The state is invalid.\r\n156: Authentication request is not proxied"
          },
          "429": {
            "description": "3: Too many requests. Please try again later."
          },
          "503": {
            "description": "1: The Wechat API is unavailable.\r\n7: The Roblox API is currently unavailable."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:WeChatTokenAuthentication"
          ]
        }
      }
    },
    "/v1/wechat/verify-connect": {
      "post": {
        "tags": [
          "WeChat"
        ],
        "summary": "Endpoint for verifying a wechat account connection to an existing Roblox user",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.TencentVerifyConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: User is invalid.\r\n5: Invalid two step verification ticket.\r\n6: The code is invalid.\r\n7: The action is unsupported."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: The Voucher is expired.\r\n9: The Voucher is invalid."
          },
          "429": {
            "description": "3: Too many attempts. Please try again later."
          },
          "503": {
            "description": "2: The two step verification feature is not enabled at this time."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "WeChat:WeChatVerifyConnect"
          ]
        }
      }
    },
    "/v1/xbox/disconnect": {
      "post": {
        "tags": [
          "Xbox"
        ],
        "summary": "Unlink the current ROBLOX account from the Xbox live account.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiSuccessResponse"
            }
          },
          "403": {
            "description": "Forbidden\r\n0: Token Validation Failed"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Xbox:Disconnect"
          ]
        }
      }
    },
    "/v1/xbox/translate": {
      "post": {
        "tags": [
          "Xbox"
        ],
        "summary": "Translate the xbox user to roblox user.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "xboxTranslateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxTranslateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxCollectionsOfUserResponse"
            }
          },
          "403": {
            "description": "\r\n0: Token Validation Failed"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Xbox:TranslateGamerTags"
          ]
        }
      }
    },
    "/v1/xbox-live/connect": {
      "post": {
        "tags": [
          "XboxLive"
        ],
        "summary": "Link the authenticated xbox user to an existing Roblox Account.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxLiveConnectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.LoginResponse"
            }
          },
          "400": {
            "description": "0: An unexpected error occurred.\r\n3: Username and Password are required. Please try again.\r\n8: Login with received credential type is not supported.\r\n24: Invalid Token"
          },
          "401": {
            "description": "26: Invalid Credentials"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n1: Incorrect username or password. Please try again.\r\n2: You must pass the robot test before logging in.\r\n4: Account has been locked. Please request a password reset.\r\n5: Unable to login. Please use Social Network sign on.\r\n6: Account issue. Please contact Support.\r\n9: Unable to login with provided credentials. Default login is required.\r\n10: Received credentials are unverified.\r\n12: Existing login session found. Please log out first."
          },
          "429": {
            "description": "7: Too many attempts. Please wait a bit.\r\n22: Too many attempts"
          },
          "503": {
            "description": "11: Service unavailable. Please try again."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "XboxLive:Connect"
          ]
        }
      }
    },
    "/v1/xbox-live/connect/verify": {
      "post": {
        "tags": [
          "XboxLive"
        ],
        "summary": "Verifies a two step verification code for xbox users",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "The request model containing information needed to verify with two step verification.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxLiveTwoStepVerificationVerifyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: User is invalid.\r\n5: Invalid two step verification ticket.\r\n7: The action is unsupported.\r\n24: Invalid Token"
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "3: Too many attempts. Please try again later."
          },
          "503": {
            "description": "2: The two step verification feature is not enabled at this time."
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "XboxLive:ConnectVerification"
          ]
        }
      }
    },
    "/v1/xbox-live/disconnect": {
      "post": {
        "tags": [
          "XboxLive"
        ],
        "summary": "Unlink the authenticated Roblox account from the Xbox Live account.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "23: Bad Request\r\n24: Invalid Token"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "XboxLive:Disconnect"
          ]
        }
      }
    },
    "/v1/xbox-live/login": {
      "post": {
        "tags": [
          "XboxLive"
        ],
        "summary": "Log in a user based on his authenticated xbox session",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "xboxLoginRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxLiveLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxLiveLoginResponse"
            }
          },
          "400": {
            "description": "24: Invalid Token"
          },
          "401": {
            "description": "26: Invalid Credentials\r\n28: Authentication Failed"
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "22: Too many attempts"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "XboxLive:Login"
          ]
        }
      }
    },
    "/v1/xbox-live/signup": {
      "post": {
        "tags": [
          "XboxLive"
        ],
        "summary": "Sign up a xbox user",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "signupRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxLiveSignupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "23: Bad Request\r\n24: Invalid Token\r\n25: Invalid Input"
          },
          "401": {
            "description": "26: Invalid Credentials\r\n28: Authentication Failed\r\n29: Signup Failed"
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "22: Too many attempts"
          }
        },
        "properties": {
          "internal": true,
          "metricIds": [
            "XboxLive:Signup"
          ]
        }
      }
    }
  },
  "definitions": {
    "Roblox.Authentication.Api.Models.AccountPinRequest": {
      "description": "A request model to accept pin.",
      "type": "object",
      "properties": {
        "pin": {
          "description": "Gets or sets the pin.",
          "type": "string"
        },
        "reauthenticationToken": {
          "description": "A re-authentication token redeemable for any password check.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.AccountPinResponse": {
      "description": "A response model for unlocking account pin",
      "type": "object",
      "properties": {
        "unlockedUntil": {
          "format": "double",
          "description": "Returns the number of seconds left the account pin is unlocked until.",
          "type": "number"
        }
      }
    },
    "Roblox.Authentication.Api.Models.AccountPinStatusResponse": {
      "description": "A class representing the status of Account Pin.",
      "type": "object",
      "properties": {
        "isEnabled": {
          "description": "Gets or sets a value indicating whether this account pin is enabled.",
          "type": "boolean"
        },
        "unlockedUntil": {
          "format": "double",
          "description": "Returns the number of seconds left the account pin is unlocked until.",
          "type": "number"
        }
      }
    },
    "Roblox.Authentication.Api.Models.AuthMetaDataResponse": {
      "description": "The response model containing metadata for auth.",
      "type": "object",
      "properties": {
        "cookieLawNoticeTimeout": {
          "format": "int32",
          "description": "Timeout for cookie law notice banner.",
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.CanSendCredentialsVerificationMessageResponse": {
      "description": "The response model containing whether a verification message can be sent to the provided credentials.",
      "type": "object",
      "properties": {
        "canSend": {
          "description": "Whether a verification message can be sent to the credentials.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.EmailValidationResponse": {
      "description": "A class representing the status of a valid email",
      "type": "object",
      "properties": {
        "isEmailValid": {
          "description": "Gets or sets a value indicating whether an email is valid",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.LoginRequest": {
      "description": "Model for login requests",
      "type": "object",
      "properties": {
        "ctype": {
          "format": "int32",
          "description": "Credentials type Roblox.Platform.Authentication.CredentialsType. ['Email' = 0, 'Username' = 1, 'PhoneNumber' = 2, 'EmailOtpSessionToken' = 3, 'AuthToken' = 4]",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "cvalue": {
          "description": "Credentials value.",
          "type": "string"
        },
        "password": {
          "description": "Credentials password.",
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "description": "Optional User Id",
          "type": "integer"
        },
        "securityQuestionSessionId": {
          "description": "Session ID for security questions challenge.",
          "type": "string"
        },
        "securityQuestionRedemptionToken": {
          "description": "Redemption token for security questions challenge.",
          "type": "string"
        },
        "secureAuthenticationIntent": {
          "$ref": "#/definitions/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
        },
        "accountBlob": {
          "description": "Metadata associated with the current session.",
          "type": "string"
        },
        "captchaId": {
          "type": "string"
        },
        "captchaToken": {
          "type": "string"
        },
        "captchaProvider": {
          "type": "string"
        },
        "challengeId": {
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.LoginResponse": {
      "description": "A success response from a login request",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/Roblox.Web.Responses.Users.SkinnyUserResponse"
        },
        "twoStepVerificationData": {
          "$ref": "#/definitions/Roblox.Authentication.Api.Models.TwoStepVerificationSentResponse"
        },
        "identityVerificationLoginTicket": {
          "description": "IdentityVerificationLoginTicket if applicable",
          "type": "string"
        },
        "isBanned": {
          "description": "Return if user is banned",
          "type": "boolean"
        },
        "accountBlob": {
          "description": "Metadata associated with the current session",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.LuobuRNVMappingMigrationRequest": {
      "description": "Request model for the Luobu RNV Mapping Migration endpoint",
      "type": "object",
      "properties": {
        "unionId": {
          "description": "UnionId",
          "type": "string"
        },
        "username": {
          "description": "User Name",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.LuobuRNVMappingMigrationResponse": {
      "description": "Response model for the Luobu RNV Mapping Migration endpoint",
      "type": "object",
      "properties": {
        "unionId": {
          "description": "The union ID",
          "type": "string"
        },
        "username": {
          "description": "The username",
          "type": "string"
        },
        "isSuccess": {
          "description": "Indicator showing if the request succeed or not",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason message if the request failed",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.MetadataResponse": {
      "description": "The metadata response",
      "type": "object",
      "properties": {
        "isUpdateUsernameEnabled": {
          "description": "The update username enabled setting",
          "type": "boolean"
        },
        "ftuxAvatarAssetMap": {
          "description": "The FTUX Avatar Asset Mapping",
          "type": "string"
        },
        "IsEmailUpsellAtLogoutEnabled": {
          "description": "If the Email Upsell at Logout is Enabled",
          "type": "boolean"
        },
        "ShouldFetchEmailUpsellIXPValuesAtLogout": {
          "description": "If the experiments on Email Upsell at Logout are enabled",
          "type": "boolean"
        },
        "IsAccountRecoveryPromptEnabled": {
          "description": "",
          "type": "boolean"
        },
        "IsContactMethodRequiredAtSignup": {
          "description": "If the contact method is required at signup",
          "type": "boolean"
        },
        "IsUserAgreementsSignupIntegrationEnabled": {
          "description": "Whether the user agreements signup integration setting is enabled",
          "type": "boolean"
        },
        "IsKoreaIdVerificationEnabled": {
          "description": "If Korea ID verification is enabled",
          "type": "boolean"
        },
        "IsPasswordRequiredForUsernameChange": {
          "description": "Whether password entry is required for username changes.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.PasswordChangeModel": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.PasswordValidationModel": {
      "type": "object",
      "properties": {
        "username": {
          "description": "The username.",
          "type": "string"
        },
        "password": {
          "description": "The password.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.PasswordValidationResponse": {
      "description": "A result representing the information about if password is valid or not.",
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "description": "The Roblox.Authentication.Api.Models.PasswordValidationStatus of the password validation ['ValidPassword' = 0, 'WeakPasswordError' = 1, 'ShortPasswordError' = 2, 'PasswordSameAsUsernameError' = 3, 'ForbiddenPasswordError' = 4, 'DumbStringsError' = 5]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "type": "integer"
        },
        "message": {
          "description": "The response message of the password validation.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.PlaystationConnectRequest": {
      "description": "Model for Playstation Connect requests",
      "type": "object",
      "properties": {
        "ctype": {
          "format": "int32",
          "description": "Credentials type Roblox.Platform.Authentication.CredentialsType. ['Email' = 0, 'Username' = 1, 'PhoneNumber' = 2, 'EmailOtpSessionToken' = 3, 'AuthToken' = 4]",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "cvalue": {
          "description": "Credentials value.",
          "type": "string"
        },
        "password": {
          "description": "Connect Password",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.PlaystationSignupRequest": {
      "description": "Model for Playstation Signup requests",
      "type": "object",
      "properties": {
        "username": {
          "description": "Signup username.",
          "type": "string"
        },
        "password": {
          "description": "Signup password.",
          "type": "string"
        },
        "birthday": {
          "format": "date-time",
          "description": "Signup birthday.",
          "type": "string"
        },
        "locale": {
          "description": "Locale",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.ProviderInfoModel": {
      "description": "A model containing information of social auth provider.",
      "type": "object",
      "properties": {
        "provider": {
          "description": "The social auth provider type.",
          "type": "string"
        },
        "identifier": {
          "description": "The social User ID.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.QQTokenAuthenticationRequest": {
      "type": "object",
      "properties": {
        "openId": {
          "description": "The open id returned by MSDK",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token returned by MSDK",
          "type": "string"
        },
        "accessTokenExpiry": {
          "format": "int64",
          "description": "The access token expiry in unix time returned by MSDK",
          "type": "integer"
        },
        "channelId": {
          "description": "The channel ID sent from Tencent to identify which platform the user is acquired",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RecommendedUsernameResponse": {
      "description": "A class representing the status of a Recommended Username",
      "type": "object",
      "properties": {
        "didGenerateNewUsername": {
          "description": "Gets or sets a value indicating whether a new username was generated",
          "type": "boolean"
        },
        "suggestedUsernames": {
          "description": "Gets or sets a value indicating the suggested username that is not taken",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Roblox.Authentication.Api.Models.RecoverUsernameRequest": {
      "description": "Request object for recover username",
      "type": "object",
      "properties": {
        "targetType": {
          "format": "int32",
          "description": "The Roblox.Authentication.Api.Models.RecoverUsernameRequest.TargetType method to recover username ['Email' = 0, 'PhoneNumber' = 1]",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        },
        "target": {
          "description": "The target used to recover username",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RecoverUsernameResponse": {
      "description": "The response model for username recovery",
      "type": "object",
      "properties": {
        "transmissionType": {
          "format": "int32",
          "description": "The transmission type the username recovery message was sent (e.g. Sms or Email)",
          "enum": [
            0,
            1
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RecoveryMetadataResponse": {
      "description": "Forgot Metadata Response",
      "type": "object",
      "properties": {
        "isOnPhone": {
          "description": "Is client on phone",
          "type": "boolean"
        },
        "codeLength": {
          "format": "int32",
          "description": "Length of phone code",
          "type": "integer"
        },
        "isPhoneFeatureEnabledForUsername": {
          "description": "Is phone feature enabled for forgot username",
          "type": "boolean"
        },
        "isPhoneFeatureEnabledForPassword": {
          "description": "Is phone feature enabled for forgot password",
          "type": "boolean"
        },
        "isBedev2CaptchaEnabledForPasswordReset": {
          "description": "Is bedev2 captcha enabled for password reset",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RedeemAuthenticationTicketRequest": {
      "description": "Request model for the authentication ticket endpoints",
      "type": "object",
      "properties": {
        "authenticationTicket": {
          "description": "The authentication ticket to be used to authenticate with.",
          "type": "string"
        },
        "retainCurrentSession": {
          "description": "Whether to retain any session cookies passed with the request (once automatic invalidation is enabled).",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.ReferralDataModel": {
      "description": "Model for Referral Data",
      "type": "object",
      "properties": {
        "acquisitionTime": {
          "format": "date-time",
          "description": "Acquisition Time",
          "type": "string"
        },
        "acquisitionReferrer": {
          "description": "Acquisition Referrer",
          "type": "string"
        },
        "medium": {
          "description": "Medium",
          "type": "string"
        },
        "source": {
          "description": "Source",
          "type": "string"
        },
        "campaign": {
          "description": "Campaign",
          "type": "string"
        },
        "adGroup": {
          "description": "AdGroup",
          "type": "string"
        },
        "keyword": {
          "description": "Keyword",
          "type": "string"
        },
        "matchType": {
          "description": "MatchType",
          "type": "string"
        },
        "sendInfo": {
          "description": "SendInfo",
          "type": "boolean"
        },
        "requestSessionId": {
          "description": "Request Session Id",
          "type": "string"
        },
        "offerId": {
          "description": "Offer Id",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.Request.ExternalUnlinkRequest": {
      "description": "Model for External Unlink requests",
      "type": "object",
      "properties": {
        "identityProvider": {
          "format": "int32",
          "description": "External Identity Provider type ['Undefined' = 0, 'Xbox' = 1, 'Playstation' = 2]",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        },
        "additionalInfoPayload": {
          "description": "External provider specific additional info payload in json",
          "type": "object",
          "additionalProperties": { }
        }
      }
    },
    "Roblox.Authentication.Api.Models.Request.IdentityVerificationLoginRequest": {
      "description": "Request model for identity verification  login",
      "type": "object",
      "properties": {
        "loginTicket": {
          "description": "The IdentityVerificationLoginTicket",
          "type": "string"
        },
        "resultToken": {
          "description": "The IdentityVerificationResultToken",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.Request.OtpSessionModel": {
      "description": "Model describing secure auth intent.",
      "type": "object",
      "properties": {
        "otpSessionToken": {
          "type": "string"
        },
        "otpContactType": {
          "format": "int32",
          "description": " ['Unset' = 1, 'Email' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel": {
      "description": "Model describing secure auth intent.",
      "type": "object",
      "properties": {
        "clientPublicKey": {
          "type": "string"
        },
        "clientEpochTimestamp": {
          "format": "int64",
          "type": "integer"
        },
        "saiSignature": {
          "type": "string"
        },
        "serverNonce": {
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RevertAccountInfoResponse": {
      "description": "Represents the response when requesting revert account metadata",
      "type": "object",
      "properties": {
        "isTwoStepVerificationEnabled": {
          "description": "Is two Step Verification Enabled",
          "type": "boolean"
        },
        "isEmailVerified": {
          "description": "Is Email Verified",
          "type": "boolean"
        },
        "isEmailChanged": {
          "description": "Is Email changed",
          "type": "boolean"
        },
        "isPhoneVerified": {
          "description": "If Phone will be reset",
          "type": "boolean"
        },
        "userId": {
          "format": "int64",
          "description": "User ID",
          "type": "integer"
        },
        "username": {
          "description": "User Name",
          "type": "string"
        },
        "ticket": {
          "description": "Ticket Guid",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RevertAccountSubmitRequest": {
      "description": "Request Model to submit a revert account request",
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int64",
          "description": "User ID",
          "type": "integer"
        },
        "NewPassword": {
          "description": "New Password",
          "type": "string"
        },
        "NewPasswordRepeated": {
          "description": "Repeated new password",
          "type": "string"
        },
        "Ticket": {
          "description": "ticket guid",
          "type": "string"
        },
        "TwoStepVerificationChallengeId": {
          "description": "The 2SV challenge ID (when redeeming a solved 2SV challenge).",
          "type": "string"
        },
        "TwoStepVerificationToken": {
          "description": "The 2SV verification token (when redeeming a solved 2SV challenge).",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RobloxAccountCreateRequest": {
      "description": "Request model for the Roblox Account Create endpoint",
      "type": "object",
      "properties": {
        "unionId": {
          "description": "UnionId",
          "type": "string"
        },
        "openId": {
          "description": "OpenId",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "birthday": {
          "format": "date-time",
          "description": "Birthday",
          "type": "string"
        },
        "username": {
          "description": "User Name",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.RobloxAccountCreationResponse": {
      "description": "Response model for the Roblox Account Create endpoint",
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "The user ID",
          "type": "integer"
        },
        "isSuccess": {
          "description": "Indicator showing if the request succeed or not",
          "type": "boolean"
        },
        "reason": {
          "description": "The reason message if the request failed",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.SendCredentialsVerificationMessageRequest": {
      "description": "Model for sending credentials verification requests",
      "type": "object",
      "properties": {
        "credentialType": {
          "format": "int32",
          "description": "Credentials type Roblox.Platform.Authentication.CredentialsType.",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "credentialValue": {
          "description": "Credentials value.",
          "type": "string"
        },
        "password": {
          "description": "Credentials password.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.SignupRequest": {
      "description": "Request model for the Signup endpoint",
      "type": "object",
      "properties": {
        "username": {
          "description": "Username",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "gender": {
          "format": "int32",
          "description": "Gender ['Unknown' = 1, 'Male' = 2, 'Female' = 3]",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "birthday": {
          "format": "date-time",
          "description": "Birthday",
          "type": "string"
        },
        "isTosAgreementBoxChecked": {
          "description": "Whether the ToS agreement box was checked",
          "type": "boolean"
        },
        "email": {
          "description": "Email",
          "type": "string"
        },
        "locale": {
          "description": "Locale",
          "type": "string"
        },
        "assetIds": {
          "description": "The Asset IDs",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "bodyColorId": {
          "format": "int32",
          "description": "The Body Color Id",
          "type": "integer"
        },
        "bodyTypeScale": {
          "format": "double",
          "description": "The Body Type Scale",
          "type": "number"
        },
        "headScale": {
          "format": "double",
          "description": "The Head Scale",
          "type": "number"
        },
        "heightScale": {
          "format": "double",
          "description": "The Height Scale",
          "type": "number"
        },
        "widthScale": {
          "format": "double",
          "description": "The Width Scale",
          "type": "number"
        },
        "proportionScale": {
          "format": "double",
          "description": "The Proportion Scale",
          "type": "number"
        },
        "referralData": {
          "$ref": "#/definitions/Roblox.Authentication.Api.Models.ReferralDataModel"
        },
        "agreementIds": {
          "description": "AgreementIds",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identityVerificationResultToken": {
          "description": "IdentityVerificationResultToken",
          "type": "string"
        },
        "secureAuthenticationIntent": {
          "$ref": "#/definitions/Roblox.Authentication.Api.Models.Request.SecureAuthenticationIntentModel"
        },
        "otpSession": {
          "$ref": "#/definitions/Roblox.Authentication.Api.Models.Request.OtpSessionModel"
        },
        "dataToken": {
          "description": "DataToken for VerifiedParentConsent flow",
          "type": "string"
        },
        "accountBlob": {
          "description": "Metadata associated with the current session.",
          "type": "string"
        },
        "captchaId": {
          "type": "string"
        },
        "captchaToken": {
          "type": "string"
        },
        "captchaProvider": {
          "type": "string"
        },
        "challengeId": {
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.SignupResponse": {
      "description": "A response model for the Signup endpoint",
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "The user ID",
          "type": "integer"
        },
        "starterPlaceId": {
          "format": "int64",
          "description": "The id of the game to start with",
          "type": "integer"
        },
        "returnUrl": {
          "description": "Url to be redirected to after signup",
          "type": "string"
        },
        "accountBlob": {
          "description": "Metadata associated with the current session.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.SocialAuthenticationDisconnectRequest": {
      "type": "object",
      "properties": {
        "Password": {
          "description": "The password of the account attempting to disconnect a social authentication provider.\r\nThis parameter is only required when disconnecting WeChat or QQ.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.SocialProvidersResponse": {
      "description": "A model containing detailed information about the social user",
      "type": "object",
      "properties": {
        "providers": {
          "description": "The social auth provider model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Authentication.Api.Models.ProviderInfoModel"
          }
        }
      }
    },
    "Roblox.Authentication.Api.Models.TencentAuthResponse": {
      "description": "Response Model for the Token Exchange Endpoint",
      "type": "object",
      "properties": {
        "voucher": {
          "description": "Voucher containing Info (union id, open id, access token, refresh token, etc)",
          "type": "string"
        },
        "gender": {
          "format": "int32",
          "description": "The gender",
          "type": "integer"
        },
        "userId": {
          "format": "int64",
          "description": "The Roblox User ID of the connected account, if one exists",
          "type": "integer"
        },
        "displayName": {
          "description": "User's display name",
          "type": "string"
        },
        "openId": {
          "description": "The openId associated with a user's WeChat or QQ from a specific app(PlayerApp, Studio etc.)",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TencentConnectRequest": {
      "description": "Request model for the tencent account connect endpoint",
      "type": "object",
      "properties": {
        "voucher": {
          "description": "Tencent Info Security Blob",
          "type": "string"
        },
        "username": {
          "description": "Username",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TencentMetadataResponse": {
      "description": "Data Response for Tencent Metadata",
      "type": "object",
      "properties": {
        "loginPage": {
          "description": "The login page URL",
          "type": "string"
        },
        "realNameVerificationUrl": {
          "description": "The real name verification URL",
          "type": "string"
        },
        "isLinkingEnabled": {
          "description": "The tencent to roblox linking switch",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TencentSignupWithoutPasswordRequest": {
      "description": "Request model for the tencent signup without Password endpoint",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "DisplayName",
          "type": "string"
        },
        "agreementIds": {
          "description": "AgreementIds",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tencentDeveloperAppType": {
          "description": "AppType",
          "type": "string"
        },
        "channelId": {
          "description": "The channel ID sent from Tencent to identify which platform the user is acquired",
          "type": "string"
        },
        "gender": {
          "format": "int32",
          "description": "Gender ['Unknown' = 1, 'Male' = 2, 'Female' = 3]",
          "enum": [
            1,
            2,
            3
          ],
          "type": "integer"
        },
        "birthday": {
          "format": "date-time",
          "description": "Birthday",
          "type": "string"
        },
        "voucher": {
          "description": "Tencent Info Security Blob",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TencentTokenAuthenticationRequest": {
      "description": "Token Exchange Request for the Token Exchange Endpoint",
      "type": "object",
      "properties": {
        "openId": {
          "description": "The open id returned by MSDK",
          "type": "string"
        },
        "accessToken": {
          "description": "The access token returned by MSDK",
          "type": "string"
        },
        "accessTokenExpiry": {
          "format": "int64",
          "description": "The access token expiry in unix time returned by MSDK",
          "type": "integer"
        },
        "refreshToken": {
          "description": "The refresh token returned by MSDK",
          "type": "string"
        },
        "refreshTokenExpiry": {
          "format": "int64",
          "description": "The refresh token expiry in unix time returned by MSDK",
          "type": "integer"
        },
        "channelId": {
          "description": "The channel ID sent from Tencent to identify which platform the user is acquired",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TencentTokenExchangeRequest": {
      "description": "Token Exchange Request for the Token Exchange Endpoint",
      "type": "object",
      "properties": {
        "code": {
          "description": "The code parameter returned from OAuth login",
          "type": "string"
        },
        "state": {
          "description": "The state parameter returned from OAuth login",
          "type": "string"
        },
        "appType": {
          "description": "The tencent developer appType parameter for developer logins",
          "type": "string"
        },
        "channelId": {
          "description": "The tencent developer appType parameter for developer logins",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TencentVerifyConnectRequest": {
      "type": "object",
      "properties": {
        "voucher": {
          "description": "Tencent Info Security Blob",
          "type": "string"
        },
        "username": {
          "description": "The username of the user the ticket belongs to",
          "type": "string"
        },
        "ticket": {
          "description": "The ticket",
          "type": "string"
        },
        "code": {
          "description": "The two step verification code",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TwoStepVerificationMetadataResponse": {
      "description": "2SV metadata",
      "type": "object",
      "properties": {
        "codeLength": {
          "format": "int32",
          "description": "The length of the 2sv code",
          "type": "integer"
        },
        "loadingImageUrl": {
          "description": "The loading image url",
          "type": "string"
        },
        "supportUrl": {
          "description": "The support url for 2sv",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TwoStepVerificationSentResponse": {
      "description": "The response model containing information about a two step verification challenge",
      "type": "object",
      "properties": {
        "mediaType": {
          "format": "int32",
          "description": "The media type the two step verification code was sent on ['Email' = 0, 'SMS' = 1, 'Authenticator' = 2, 'RecoveryCode' = 3, 'SecurityKey' = 4]",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "ticket": {
          "description": "The two step verification ticket",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TwoStepVerificationTicketRequest": {
      "description": "A request model that holds two step verification ticket information",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username of the user the ticket belongs to",
          "type": "string"
        },
        "ticket": {
          "description": "The ticket",
          "type": "string"
        },
        "actionType": {
          "format": "int32",
          "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType to request. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.TwoStepVerificationVerifyRequest": {
      "description": "A request model that contains information needed to verify with two step verification",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username of the user the ticket belongs to",
          "type": "string"
        },
        "ticket": {
          "description": "The ticket",
          "type": "string"
        },
        "code": {
          "description": "The two step verification code",
          "type": "string"
        },
        "rememberDevice": {
          "description": "Whether or not to remember the device for two step verification.",
          "type": "boolean"
        },
        "actionType": {
          "format": "int32",
          "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType to verify. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.UsernameChangeRequest": {
      "description": "The username change request",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username",
          "type": "string"
        },
        "password": {
          "description": "The password",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.UsernameValidationRequest": {
      "type": "object",
      "properties": {
        "username": {
          "description": "The username",
          "type": "string"
        },
        "birthday": {
          "format": "date-time",
          "description": "The birthday",
          "type": "string"
        },
        "context": {
          "format": "int32",
          "description": "Roblox.Authentication.Api.Models.UsernameValidationContext",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.UsernameValidationResponse": {
      "description": "A result representing the information about if username is valid or not.",
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "description": "The Roblox.Authentication.Api.Models.UsernameValidationStatus of the username validation. ['ValidUsername' = 0, 'AlreadyInUseError' = 1, 'ModerationError' = 2, 'InvalidLengthError' = 3, 'StartsOrEndsWithUnderscoreError' = 4, 'TooManyUnderscoresError' = 5, 'ContainsSpacesError' = 6, 'InvalidCharactersError' = 7, 'ContainsPiiError' = 10, 'ContainsReservedUsernameError' = 12]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            10,
            12
          ],
          "type": "integer"
        },
        "message": {
          "description": "The response message of the username validation.",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.UsernamesResponse": {
      "description": "The response model to get existing usernames on Roblox",
      "type": "object",
      "properties": {
        "usernames": {
          "description": "The list of usernames",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxCollectionsOfUserResponse": {
      "description": "The information representing a collection of users",
      "type": "object",
      "properties": {
        "Users": {
          "description": "Xbox users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Authentication.Api.Models.XboxUserModel"
          }
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxConnectionModel": {
      "description": "A model containing information on whether the user is a Xbox user.",
      "type": "object",
      "properties": {
        "hasConnectedXboxAccount": {
          "description": "Whether the current user has Xbox account connected.",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxLiveAccountResponse": {
      "description": "A response model for returing xboxlive account info",
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "description": "User Id of associated roblox account",
          "type": "integer"
        },
        "username": {
          "description": "Username of associated roblox account",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxLiveConnectRequest": {
      "description": "Model for Xbox Connect requests",
      "type": "object",
      "properties": {
        "ctype": {
          "format": "int32",
          "description": "Credentials type Roblox.Platform.Authentication.CredentialsType. ['Email' = 0, 'Username' = 1, 'PhoneNumber' = 2, 'EmailOtpSessionToken' = 3, 'AuthToken' = 4]",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        },
        "cvalue": {
          "description": "Credentials value.",
          "type": "string"
        },
        "password": {
          "description": "Connect Password",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxLiveLoginRequest": {
      "description": "Model for Xbox Login requests",
      "type": "object",
      "properties": {
        "clientTimeStamp": {
          "format": "date-time",
          "description": "Optional client time stamp",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxLiveLoginResponse": {
      "description": "A response model for login with XboxLive account",
      "type": "object",
      "properties": {
        "newDailyLogin": {
          "description": "Is user first time logged today",
          "type": "boolean"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxLiveSignupRequest": {
      "description": "Model for Xbox Signup requests",
      "type": "object",
      "properties": {
        "username": {
          "description": "Signup Username",
          "type": "string"
        },
        "password": {
          "description": "Signup Password",
          "type": "string"
        },
        "locale": {
          "description": "Locale",
          "type": "string"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxLiveTwoStepVerificationVerifyRequest": {
      "description": "A request model that contains information needed to verify with two step verification on xbox",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username of the user the ticket belongs to",
          "type": "string"
        },
        "challengeId": {
          "format": "uuid",
          "description": "The challenge id",
          "type": "string"
        },
        "verificationToken": {
          "description": "The two step verification token",
          "type": "string"
        },
        "actionType": {
          "format": "int32",
          "description": "The Roblox.TwoStepVerification.Client.TwoStepVerificationActionType to verify. ['Unknown' = 0, 'Login' = 1, 'RobuxSpend' = 2, 'ItemTrade' = 3, 'Resale' = 4, 'PasswordReset' = 5, 'RevertAccount' = 6, 'Generic' = 7, 'GenericWithRecoveryCodes' = 8]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxLoginConsecutiveDaysResponse": {
      "description": "The information representing the count of Xbox login consecutive days.",
      "type": "object",
      "properties": {
        "count": {
          "format": "int32",
          "description": "The count of Xbox log in consecutive days",
          "type": "integer"
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxTranslateRequest": {
      "description": "Model for Xbox translate requests",
      "type": "object",
      "properties": {
        "ids": {
          "description": "Signup Username",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Roblox.Authentication.Api.Models.XboxUserModel": {
      "description": "A model containing information about Xbox User.",
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        },
        "Username": {
          "type": "string"
        }
      }
    },
    "Roblox.Web.Responses.Users.SkinnyUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiSuccessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    }
  }
}